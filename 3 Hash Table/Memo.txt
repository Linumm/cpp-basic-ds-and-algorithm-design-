III. HASH TABLE

<Def>
1. Lookup: Task of searching specific "value" in container, or the existence of that key
2. Hashing : Express each data as a unique "hash value" and use that to search the existence of data or the original data.
3. Hash function : return the unique "hash value" from given data.
4. Collision : the case that other data(keys) can get same hash value


<3.2>
-Simple Example of Hash func is "Modulo function" (using the concept of math's Module)

-Modulo function : return  "given_data % defined Integer N" -> use array size of N
 -> collision (7%4 == 3%4)


<3.3 Collision in Hash table>
-One way to avoid collision is "CHAINING"

-Chaining:
    1) Not a key, saving a "linked list"
    2) If collision happens, add a new key at Last node of list.
    3) Time Complexity
        >Insertion : O(1)
        >Lookup and Deletetion : It can be pretty slow by the data and hash table size.
            (if all key have same hash value, it becomes "linear search")
    
    4) If hash table is too small, then list size gets bigger / if hash table is too big, then there can be memory waste.


-Load Factor = entire num of key / size of hash table
    1) if lf == 1, num of key == size of hash table ->Ideal case
    2) if lf < 1, there can be memory waste.
+ Some hash table "rehash" if the load factor get too bigger or too smaller


-Basically, making the difference between the max size of bucket and the min size of bucket small is good.
    ->this means each keys are distributed well.


=====================================================
<3.3.3 Open Addressing>
-def : not adding any list in table, just put all of keys in one hash table. (so no hash key duplication)
       if hash value is already in use, then search other empty hash value. then how about search?

1. Linear probing : move one by one until the hash value is empty to fill.
    -There can happen "Clustering(군집화)" : crowded around specific one hash value
    ->This happens when one specific hash value is returned frequently.
    ->this will make speed slow.


2. Quadratic probing : move quadratically [x+1^2, x+2^2, x+3^3]
    -this will reduce the probability of Clustering

====================================================
<3.3.4 Cuckoo Hashing>
-def : there're "2" hash tables, and the element can be in one of them.
       and those elements can be moved to the other. 

-If there's already key in hash value, move it to other. (this will be repeated recursively until existing one gets adequate empty hash value)
    -> this "cycle" can happen infinitely, but there's well-hash function

-This method can't save more than it's size, so make its "Load factor < 0.5" is recommeneded.

====================================================
<3.4 C++ Hash table>
-C++ provide two STL hash table with template (general)
 : std::unordered_set<key>  /  std::unordered_map<key, value>

-Both, use "CHaining", and each one row (the start point of list) is called "bucket".
-Basically, Load factor of these two : 1
    >if lf > 1, automatically resize table and rehashing
    >but user also can change max Lf by using "max_load_factor(float)"

====================================================
<3.5 Bloom Filter>
-It is "not deterministic" 
    1) it doesnt give "false-negative", but give "false-positive"
    2) that means, if I get false, filter sure it does not exist definitely but if true, it can exist or does not exist.

-this use boolean type array.

-then why is it undeterministic?
    -1) Because it does not use "single" hash function, use at least 3.
        so after taking several hash function, one element can get several hash value, so there happpens value sharing.
    -2) but if none get 1, it is surely 0, means does not exist.

-if at least one hash value from key is 0, then returns "false" [so, hash values take AND gates in lookup process]

-Bloom filter does not contain data itself, so it can accept diverse data type (even mixed!)

-Example : Email address duplication checking 